<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">

		<!-- 
		配置bean 
		class: bean 的全类名，通过反射的方式在IOC 容器中创建Bean 所以要求Bean中必须有无参数的构造器
		id：标识容器中的Bean id 唯一
		-->
		<bean id="helloWorld2" class="com.atguigu.spring.beans.HelloWorld">
		<property name="name2" value="Spring"></property>
		</bean>
		
		<!--通过构造方法来配置Bean的属性  -->
		<bean id="car" class="com.atguigu.spring.beans.Car">
				<constructor-arg value="Audi" index="0"></constructor-arg>
				<constructor-arg value="shanghai" index="1"></constructor-arg>
				<constructor-arg value="30000" type="double"></constructor-arg>
		</bean>
		
		<!-- 使用构造器注入属性值可以指定参数的位置和参数的类型   以区分重载的构造器-->
		<bean id="car2" class="com.atguigu.spring.beans.Car">
			<constructor-arg value="Baoma" type="java.lang.String"></constructor-arg>
			<!--如果 字面值包含特殊字符可以使用<![CDATA[]]> 包裹起来 -->
			<!-- 属性值也可以使用value子节点进行配置 -->
			<constructor-arg type="java.lang.String">
			<value><![CDATA[Shanghai]]></value>
			</constructor-arg>
			<constructor-arg type="int">
				<value>250</value>
			</constructor-arg>
		</bean>
		
		<bean id="person" class="com.atguigu.spring.beans.Person">
		<property name="name"  value="Tom"></property>
		<property name="age"  value="24"></property>
		<!-- 可以使用property 的 ref 属性建立 bean 之间的引用关系。 -->
		<!-- 
		<property name="car" ref="car2"></property>
		 -->
		<!-- 
		<property name="car">
			<ref bean="car2"/>
		</property>
		 -->
		
		<!-- 内部bean，不能被外部引用，只能在内部使用 -->
		<property name="car">
			<bean id="car3" class="com.atguigu.spring.beans.Car">
				<constructor-arg value="Ford"></constructor-arg>
				<constructor-arg value="Changan"></constructor-arg>
				<constructor-arg value="20000" type="double"></constructor-arg>
			</bean>
		</property>
		
		<property name="car.maxSpeed" value="260"></property>
		</bean>
		<bean id="person2" class="com.atguigu.spring.beans.Person">
				<constructor-arg value="Jerry"></constructor-arg>
				<constructor-arg value="25"></constructor-arg>
				<!-- 
				<constructor-arg ref="car"></constructor-arg>
				 -->		
				<!-- 测试赋值null -->
				<!-- 
					<constructor-arg><null/></constructor-arg>
				 -->
					<constructor-arg ref="car"></constructor-arg>
					<!-- 为级联属性赋值 注意：属性需要先初始化后才可以为级联属性赋值，否则会有异常，和struts2不同 -->
					<property name="car.maxSpeed" value="250"></property>
			</bean>
			<!-- 测试如何配置集合属性 -->
			<bean id="person3" class="com.atguigu.spring.beans.collections.Person">
						<property name="name" value="Mike"></property>
						<property name="age" value="27"></property>
						<property name="cars" >
								<!-- 使用list 节点为List 类型属性赋值 -->
								<list>
										<ref bean="car"/>
										<ref bean="car2"/>
										<bean id="car3" class="com.atguigu.spring.beans.Car">
											<constructor-arg value="Ford"></constructor-arg>
											<constructor-arg value="Changan"></constructor-arg>
											<constructor-arg value="20000" type="double"></constructor-arg>
										</bean>
								</list>
						</property>
			</bean>
			
			<!-- 配置Map 属性值 -->
			<bean id="newPerson" class="com.atguigu.spring.beans.collections.NewPerson">
					<property name="name" value="Rose"></property>
					<property name="age" value="28"></property>
					<property name="cars" >
					<!-- 使用map节点及map的entry 子节点配置Map类型的成员变量 -->
							<map>
									<entry key="AA" value-ref="car"></entry>
									<entry key="BB" value-ref="car2"></entry>
							</map>
					</property>
			</bean>
		
			<!-- 配置Properties 属性值 -->
			<bean id="dataSource" class="com.atguigu.spring.beans.collections.DataSource">
					<property name="properties">
							<!-- 使用props 和prop子节点来为Properties 属性赋值 -->
							<props>
									<prop key="user">root</prop>
									<prop key="password">1234</prop>
									<prop key="jdbcUrl">jbdc:mysql:///test</prop>
									<prop key="diverClass">com.mysql.jdbc.Driver</prop>
							</props>
					</property>
			</bean>
			
			<!-- 配置单例的集合bean，以供多个bean进行引用,需要导入命名空间 -->
			<util:list id="cars">
					<ref bean="car"/>
					<ref bean="car2"/>
			</util:list>
			
			<bean id="person4" class="com.atguigu.spring.beans.collections.Person">
					<property name="name" value="Jack"></property>
					<property name="age" value="29"></property>
					<property name="cars" ref="cars"></property>
			</bean>
			
			<!-- 通过p 命名空间为bean 的属性赋值，需要先导入p命名空间 相对于传统的配置方式更加的简洁 -->
			<bean id="person5" class="com.atguigu.spring.beans.collections.Person" 
					p:age="30" p:name="Queen" p:cars-ref="cars"></bean>
			 
			
			
			
			
			
			
</beans>
